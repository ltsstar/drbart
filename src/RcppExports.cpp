// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// do_rgig1
double do_rgig1(double lambda, double chi, double psi);
RcppExport SEXP _drbart_do_rgig1(SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(do_rgig1(lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// gig_norm
double gig_norm(double lambda, double chi, double psi);
RcppExport SEXP _drbart_gig_norm(SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(gig_norm(lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// dmixnorm0_post
NumericMatrix dmixnorm0_post(NumericVector x, List mus, NumericVector sd, List logprobs);
RcppExport SEXP _drbart_dmixnorm0_post(SEXP xSEXP, SEXP musSEXP, SEXP sdSEXP, SEXP logprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< List >::type logprobs(logprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(dmixnorm0_post(x, mus, sd, logprobs));
    return rcpp_result_gen;
END_RCPP
}
// pmixnorm0_post
NumericMatrix pmixnorm0_post(NumericVector x, List mus, NumericVector sd, List logprobs);
RcppExport SEXP _drbart_pmixnorm0_post(SEXP xSEXP, SEXP musSEXP, SEXP sdSEXP, SEXP logprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< List >::type logprobs(logprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(pmixnorm0_post(x, mus, sd, logprobs));
    return rcpp_result_gen;
END_RCPP
}
// dmixnorm_post
NumericMatrix dmixnorm_post(NumericVector x, List mus, List sds, List logprobs);
RcppExport SEXP _drbart_dmixnorm_post(SEXP xSEXP, SEXP musSEXP, SEXP sdsSEXP, SEXP logprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< List >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< List >::type logprobs(logprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(dmixnorm_post(x, mus, sds, logprobs));
    return rcpp_result_gen;
END_RCPP
}
// pmixnorm_post
NumericMatrix pmixnorm_post(NumericVector x, List mus, List sds, List logprobs);
RcppExport SEXP _drbart_pmixnorm_post(SEXP xSEXP, SEXP musSEXP, SEXP sdsSEXP, SEXP logprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< List >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< List >::type logprobs(logprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(pmixnorm_post(x, mus, sds, logprobs));
    return rcpp_result_gen;
END_RCPP
}
// drbart_l
List drbart_l(NumericVector y_, NumericVector x_, List xinfo_list, int burn, int nd, int thin, int printevery, int m, double alpha, double beta, double lambda, double nu, double kfac, IntegerVector trunc_below, CharacterVector treef_name_);
RcppExport SEXP _drbart_drbart_l(SEXP y_SEXP, SEXP x_SEXP, SEXP xinfo_listSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP printeverySEXP, SEXP mSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP kfacSEXP, SEXP trunc_belowSEXP, SEXP treef_name_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< List >::type xinfo_list(xinfo_listSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type printevery(printeverySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kfac(kfacSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type trunc_below(trunc_belowSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_(treef_name_SEXP);
    rcpp_result_gen = Rcpp::wrap(drbart_l(y_, x_, xinfo_list, burn, nd, thin, printevery, m, alpha, beta, lambda, nu, kfac, trunc_below, treef_name_));
    return rcpp_result_gen;
END_RCPP
}
// drbartRcppHeteroClean
List drbartRcppHeteroClean(NumericVector y_, NumericVector x_, NumericVector xprec_, List xinfo_list, List xinfo_prec_list, int burn, int nd, int thin, int printevery, int m, int mprec, double alpha, double beta, double nu, double kfac, double phi0, bool scalemix, IntegerVector trunc_below, CharacterVector treef_name_, CharacterVector treef_prec_name_);
RcppExport SEXP _drbart_drbartRcppHeteroClean(SEXP y_SEXP, SEXP x_SEXP, SEXP xprec_SEXP, SEXP xinfo_listSEXP, SEXP xinfo_prec_listSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP printeverySEXP, SEXP mSEXP, SEXP mprecSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP kfacSEXP, SEXP phi0SEXP, SEXP scalemixSEXP, SEXP trunc_belowSEXP, SEXP treef_name_SEXP, SEXP treef_prec_name_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xprec_(xprec_SEXP);
    Rcpp::traits::input_parameter< List >::type xinfo_list(xinfo_listSEXP);
    Rcpp::traits::input_parameter< List >::type xinfo_prec_list(xinfo_prec_listSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type printevery(printeverySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type mprec(mprecSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type kfac(kfacSEXP);
    Rcpp::traits::input_parameter< double >::type phi0(phi0SEXP);
    Rcpp::traits::input_parameter< bool >::type scalemix(scalemixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type trunc_below(trunc_belowSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_(treef_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_prec_name_(treef_prec_name_SEXP);
    rcpp_result_gen = Rcpp::wrap(drbartRcppHeteroClean(y_, x_, xprec_, xinfo_list, xinfo_prec_list, burn, nd, thin, printevery, m, mprec, alpha, beta, nu, kfac, phi0, scalemix, trunc_below, treef_name_, treef_prec_name_));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_TreeSamples();

static const R_CallMethodDef CallEntries[] = {
    {"_drbart_do_rgig1", (DL_FUNC) &_drbart_do_rgig1, 3},
    {"_drbart_gig_norm", (DL_FUNC) &_drbart_gig_norm, 3},
    {"_drbart_dmixnorm0_post", (DL_FUNC) &_drbart_dmixnorm0_post, 4},
    {"_drbart_pmixnorm0_post", (DL_FUNC) &_drbart_pmixnorm0_post, 4},
    {"_drbart_dmixnorm_post", (DL_FUNC) &_drbart_dmixnorm_post, 4},
    {"_drbart_pmixnorm_post", (DL_FUNC) &_drbart_pmixnorm_post, 4},
    {"_drbart_drbart_l", (DL_FUNC) &_drbart_drbart_l, 15},
    {"_drbart_drbartRcppHeteroClean", (DL_FUNC) &_drbart_drbartRcppHeteroClean, 20},
    {"_rcpp_module_boot_TreeSamples", (DL_FUNC) &_rcpp_module_boot_TreeSamples, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_drbart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
